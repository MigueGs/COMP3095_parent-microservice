#  ----------------------------------------------------------------------------------
#1. docker-compose -p comp3095-microservices-ecommerce -f docker-compose-single.yml up -d
# -- This command will start the containers in detached mode without rebuilding the images (if they exist)
#
#2. docker-compose -p comp3095-microservices-ecommerce -f docker-compose-single.yml up -d --build
# -- This command force the rebuild of all images, even if they are already exist, before starting the containers
#version: '3.9'

services:

  #Product-Service
  product-service:
    image: product-service
    ports:
      - "8074:8074"
    build:
      context: ./product-service         #The directory where the DockerFile resides
      dockerfile: ./Dockerfile           # Specify the DockerFile for use to build image
    container_name: product-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - mongodb
    networks:
      - spring

  #Order-Service
  order-service:
    image: order-service
    container_name: order-service
    build:
      context: ./order-service
      dockerfile: ./Dockerfile
    ports:
      - "8075:8075"
    environment:
     - SPRING_PROFILES_ACTIVE=docker
     - POSTGRES_USER=admin
     - POSTGRES_PASSWORD=password
    depends_on:
      - postgres-order
    networks:
      - spring

  #Inventory-Service
  inventory-service:
    image: inventory-service
    container_name: inventory-service
    build:
      context: ./inventory-service
      dockerfile: ./Dockerfile
    ports:
      - "8076:8076"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
    depends_on:
      - postgres-inventory
    networks:
      - spring

  notification-service:
    image: notification-service
    container_name: notification-service
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    ports:
      - "8064:8064"
    environment:
        SPRING_PROFILES_ACTIVE: docker
        SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER-URI: http://keycloak:8080/realms/spring-microservices-security-realm
    networks:
      - spring



#Product-service Mongodb
  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27020:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - ./data/mongo/products:/data/db
      - ./init/mongo/docker-entrypoint-initdb.d/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    command: mongod --auth
    networks:
      - spring

  mongo-express:
    image: mongo-express
    ports:
      - "8089:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongodb #connect to mongo-express to the mongodb container by name
    container_name: mongo-express-external
#    restart: unless-stopped
    depends_on:
      - mongodb
    networks:
      - spring



  #Postgres for Order, Inventory Service
  postgres-inventory:
    image: postgres:latest
    ports:
      - "5433:5432"
    container_name: postgres-inventory
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=inventory-service
    volumes:
      - ./data/inventory:/var/lib/postgresql/data
      - ./init/inventory/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - spring


  postgres-order:
    image: postgres:latest
    ports:
      - "5432:5432"
    container_name: postgres-order
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=order-service
    volumes:
      - ./data/order:/var/lib/postgresql/data
      - ./init/order/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - spring

  pgadmin:
    image: dpage/pgadmin4
    ports:
      - "8000:80"
    container_name: pgadmin-inventory
    environment:
      - PGADMIN_DEFAULT_EMAIL=user@domain.ca
      - PGADMIN_DEFAULT_PASSWORD=password
    networks:
      - spring

    #keyCloak
  keycloak:
      container_name: keycloak
      hostname: keycloak
      image: quay.io/keycloak/keycloak:24.0.1
      command: [ "start-dev", "--import-realm" ]
      environment:
        DB_VENDOR: postgres
        DB_ADDR: postgres-keycloak
        DB_DATABASE: keycloak
        DB_USER: admin
        DB_PASSWORD: password
        KEYCLOAK_ADMIN: admin
        KEYCLOAK_ADMIN_PASSWORD: password
        ROOT_LOGLEVEL: DEBUG
        JBOSS_LOG_MANAGER_ROOT_LOGGER: DEBUG, stdout, FILE
      ports:
        - "8080:8080"
      volumes:
        - ./realms/:/opt/keycloak/data/import
      depends_on:
        - postgres-keycloak
      networks:
        - spring



  postgres-keycloak:
      image: postgres:latest
      ports:
        - "5431:5432"
      container_name: postgres-keycloak
      environment:
        - POSTGRES_DB=keycloak
        - POSTGRES_USER=admin
        - POSTGRES_PASSWORD=password
        - PGDATA=/data/postgres
      volumes:
        - ./data/postgres/keycloak:/var/lib/postgresql/data
      networks:
        - spring

    # Api Gateway
  api-gateway:
        image: api-gateway
        build:
          context: ./api-gateway
          dockerfile: ./Dockerfile
        ports:
          - "9000:9000"
        container_name: api-gateway
        environment:
          SPRING_PROFILES_ACTIVE: docker
        networks:
          - spring

    #kafka

  zookeeper:
    container_name: zookeeper
    hostname: zookeeper
    image: confluentinc/cp-zookeeper
    ports:
      - "2181:2181"

    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - spring

  broker:
    container_name: broker
    image: confluentinc/cp-kafka:7.5.0
    ports:
      # External connections (outside docker) use 9092 and host.docker.internal
      - "9092:9092"
      # Internal connections (inside docker) and the container host name (broker)
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT, PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092, PLAINTEXT_HOST://host.docker.internal:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      zookeeper:
        condition: service_started
    healthcheck:
      test: [ "CMD-SHELL", "kafka-broker-api-versions --bootstrap-server broker:29092 || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - spring

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8070:8080"
    environment:
      KAFKA_CLUSTERS_NAME: local
      KAFKA_CLUSTERS_BOOTSTRAPSERVERS: broker:29092
      DYNAMIC_CONFIG_ENABLED: 'true'
    depends_on:
      broker:
        condition: service_healthy
    networks:
      - spring


volumes:
  mongodb:
    driver: local     # use local driver for persisting data on the host machine

networks:
  spring:
    driver: bridge   #  bridge network allows isolated communication between containers